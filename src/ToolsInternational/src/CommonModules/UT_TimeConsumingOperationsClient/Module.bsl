// Wait while the procedure is executed in the background and open a time-consuming operation idle form.
// Used together with the TimeConsumingOperations.ExecuteInBackground function in order to make the 
// user interface more responsive by replacing a time-consuming server call with a background job start.
// 
// Parameters:
//  TimeConsumingOperation     - Structure - see the return value of the TimeConsumingOperations.ExecuteInBackground function.
//  CompletionNotification  - NotifyDescription - the notification that is called on completion of the background job.
//                           The notification handler has the following parameters:
//   * Result - Structure, Undefined - a structure with properties or Undefined if the job was canceled. Properties:
//	   ** Status           - String - "Completed" if the job has completed successfully.
//	                                  "Error" if the job has completed with error.
//	   ** ResultAddress  - String - the address of the temporary storage where the procedure result 
//	                                  must be (or already is) stored.
//	   ** AdditionalResultAddress - String - if the AdditionalResult parameter is set, it contains 
//	                                     the address of the additional temporary storage where the 
//	                                     procedure result must be (or already is) stored.
//	   ** BriefErrorDescription   - String - contains brief description of the exception if Status = "Error".
//	   ** DetailErrorDescription - String - contains detailed description of the exception if Status = "Error".
//	   ** Messages        - FixedArray, Undefined - the array of UserMessage objects that were 
//                                                generated by the time-consuming operation handler.
//   * AdditionalParameters - Arbitrary - arbitrary data that was passed in the notification details. 
//  IdleParameters      - Structure - see TimeConsumingOperationsClient.IdleParameters. 
//
Procedure WaitForCompletion(Val TimeConsumingOperation, Val CompletionNotification = Undefined, 
	Val IdleParameters = Undefined) Export
	
	CheckParametersWaitForCompletion(TimeConsumingOperation, CompletionNotification, IdleParameters);

	If TimeConsumingOperation.Status <> "Running" Then
		If CompletionNotification <> Undefined Then
			If TimeConsumingOperation.Status <> "Canceled" Then
				Result = New Structure;
				Result.Insert("Status", TimeConsumingOperation.Status);
				Result.Insert("ResultAddress", TimeConsumingOperation.ResultAddress);
				Result.Insert("AdditionalResultAddress", TimeConsumingOperation.AdditionalResultAddress);
				Result.Insert("BriefErrorPresentation", TimeConsumingOperation.BriefErrorPresentation);
				Result.Insert("DetailedErrorPresentation", TimeConsumingOperation.DetailedErrorPresentation);
				Result.Insert("Messages", ?(IdleParameters <> Undefined AND IdleParameters.OutputMessages, 
					TimeConsumingOperation.Messages, Undefined));
			Else
				Result = Undefined;
			EndIf;
			
			If TimeConsumingOperation.Status = "Completed" AND IdleParameters <> Undefined Then
				ShowNotification(IdleParameters.UserNotification);
			EndIf;
			ExecuteNotifyProcessing(CompletionNotification, Result);
		EndIf;
		Return;
	EndIf;

	FormParameters = IdleParameters(Undefined);
	If IdleParameters <> Undefined Then
		FillPropertyValues(FormParameters, IdleParameters);
	EndIf;
	FormParameters.Insert("ResultAddress", TimeConsumingOperation.ResultAddress);
	FormParameters.Insert("AdditionalResultAddress", TimeConsumingOperation.AdditionalResultAddress);
	FormParameters.Insert("JobID", TimeConsumingOperation.JobID);

	If FormParameters.OutputIdleWindow Then
		FormParameters.Delete("OwnerForm");
		
		OpenForm("CommonForm.UT_TimeConsumingOperation", FormParameters, 
			?(IdleParameters <> Undefined, IdleParameters.OwnerForm, Undefined),
			,,,CompletionNotification);
	Else
		FormParameters.Insert("CompletionNotification", CompletionNotification);
		FormParameters.Insert("CurrentInterval", ?(FormParameters.Interval <> 0, FormParameters.Interval, 1));
		FormParameters.Insert("Control", CurrentDate() + FormParameters.CurrentInterval); // The session date is ignored.
		
		Operations = TimeConsumingOperationsInProgress();
		Operations.List.Insert(FormParameters.JobID, FormParameters);

		AttachIdleHandler("UT_TimeConsumingOperationMonitor", FormParameters.CurrentInterval, True);
	EndIf;
	
EndProcedure

Function TimeConsumingOperationsInProgress() Export
	
	ParameterName = "UT_UniversalTools.TimeConsumingOperationsInProgress";
	If UT_ApplicationParameters[ParameterName] = Undefined Then
		Operations = New Structure("DataProcessor,List", False, New Map);
		UT_ApplicationParameters.Insert(ParameterName, Operations);
	EndIf;
	Return UT_ApplicationParameters[ParameterName];

EndFunction

Procedure CheckParametersWaitForCompletion(Val TimeConsumingOperation, Val CompletionNotification, Val IdleParameters)
	
	UT_CommonClientServer.CheckParameter("UT_TimeConsumingOperationsClient.WaitForCompletion",
		"TimeConsumingOperation", TimeConsumingOperation, Type("Structure"));

	If CompletionNotification <> Undefined Then
		UT_CommonClientServer.CheckParameter("UT_TimeConsumingOperationsClient.WaitForCompletion",
			"CompletionNotification", CompletionNotification, Type("NotifyDescription"));
	EndIf;
	
	If IdleParameters <> Undefined Then
		
		PropertyTypes = New Structure;
		If IdleParameters.OwnerForm <> Undefined Then
			PropertyTypes.Insert("OwnerForm", UT_CommonClientServer.ManagedFormType());
		EndIf;
		PropertyTypes.Insert("MessageText", Type("String"));
		PropertyTypes.Insert("OutputIdleWindow", Type("Boolean"));
		PropertyTypes.Insert("OutputProgressBar", Type("Boolean"));
		PropertyTypes.Insert("OutputMessages", Type("Boolean"));
		PropertyTypes.Insert("Interval", Type("Number"));
		PropertyTypes.Insert("UserNotification", Type("Structure"));
		PropertyTypes.Insert("MustReceiveResult", Type("Boolean"));

		UT_CommonClientServer.CheckParameter("UT_TimeConsumingOperationsClient.WaitForCompletion",
			"IdleParameters", IdleParameters, Type("Structure"), PropertyTypes);
		UT_CommonClientServer.Validate(IdleParameters.Interval = 0 Or IdleParameters.Interval >= 1, 
			NStr("ru = 'Параметр ПараметрыОжидания.Интервал должен быть больше или равен 1'; en = 'The IdleParameters.Interval parameter must be equal to or greater than 1.'"),
			"UT_TimeConsumingOperationsClient.WaitForCompletion");
		UT_CommonClientServer.Validate(Not (IdleParameters.ExecutionProgressNotification <> Undefined AND IdleParameters.OutputIdleWindow), 
			NStr("ru = 'Если параметр ПараметрыОжидания.ВыводитьОкноОжидания установлен в Истина, то параметр ПараметрыОжидания.ОповещениеОПрогрессеВыполнения не поддерживается'; en = 'If the IdleParameters.OutputIdleWindow parameter is True, the IdleParameters.ExecutionProgressNotification parameter is ignored.'"),
			"UT_TimeConsumingOperationsClient.WaitForCompletion");
	EndIf;

EndProcedure

Procedure ShowNotification(UserNotification) Export
	
	Notification = UserNotification;
	If Not Notification.Show Then
		Return;
	EndIf;
	
	ShowUserNotification(?(Notification.Text <> Undefined, Notification.Text, NStr("ru = 'Действие выполнено'; en = 'Operation completed.'")), 
		Notification.URL, Notification.Explanation);

EndProcedure

// Returns a blank structure for the IdleParameters parameter of TimeConsumingOperationsClient.WaitForCompletion procedure.
//
// Parameters:
//  OwnerForm - ManagedForm, Undefined - the form used to call the time-consuming operation.
//
// Returns:
//  Structure              - job execution parameters: 
//   * OwnerForm          - ManagedForm, Undefined - the form used to call the time-consuming operation.
//   * MessageText         - String - the message text that is displayed in the idle form.
//                                       The default value is "Please wait..."
//   * OutputIdleWindow   - Boolean - if True, open the idle window with visual indication of a time-consuming operation.
//                                       Set the value to False if you use your own indication engine.
//   * OutputExecutionProgress - Boolean - show execution progress as percentage in the idle form.
//   * ExecutionProgressNotification - NotifyDescription - notification that is periodically called 
//                                      when checking for completion of the background job. The notification handler has the following parameters:
//     ** Progress - Structure, Undefined - a structure with properties or Undefined if the job was canceled. Properties:
//	     *** Status               - String - "Running" if the job is running.
//                                           "Completed " if the job has completed.
//	                                         "Error" if the job has completed with error.
//                                           "Canceled" if job is canceled by a user or by an administrator.
//	     *** JobID - UUID - the ID of the running background job.
//	     *** Progress             - Structure, Undefined - the result of TimeConsumingOperations.
//                                                            ReadProgress if OutputExecutionProgress = True.
//	     *** Messages            - FixedArray, Undefined - if OutputMessages = True, the array of 
//                                  UserMessage objects, a portion of messages that were generated by the time-consuming operation handler.
//     ** AdditionalParameters - Arbitrary - arbitrary data that was passed in the notification details. 
//
//   * OutputMessages      - Boolean - output messages that were generated by the time-consuming 
//                                       operation handler as progress or completion notifications.
//   * Interval               - Number  - interval between time-consuming operation completion checks, in seconds.
//                                       The default value is 0. After each check, the value 
//                                       increases from 1 to 15 seconds with increment 1.4.
//   * UserNotification - Structure - contains the following properties:
//     ** Show            - Boolean - show user notification upon completion of the time-consumping operation if True.
//     ** Text               - String - the user notification text.
//     ** URL - String - the user notification URL.
//     ** Note           - String - the user notification note.
//   
//   * GetResult - Boolean - Internal parameter. Not intended for use.
//
Function IdleParameters(OwnerForm) Export
	
	Result = New Structure;
	Result.Insert("OwnerForm", OwnerForm);
	Result.Insert("MessageText", "");
	Result.Insert("OutputIdleWindow", True);
	Result.Insert("OutputProgressBar", False);
	Result.Insert("ExecutionProgressNotification", Undefined);
	Result.Insert("OutputMessages", False);
	Result.Insert("Interval", 0);
	Result.Insert("MustReceiveResult", False);
	
	UserNotification = New Structure;
	UserNotification.Insert("Show", False);
	UserNotification.Insert("Text", Undefined);
	UserNotification.Insert("URL", Undefined);
	UserNotification.Insert("Explanation", Undefined);
	Result.Insert("UserNotification", UserNotification);
	
	Return Result;
	
EndFunction

// Fills the parameter structure with new calculated values.
// 
// Parameters:
//  IdleHandlerParameters - Structure - the structure to be filled with calculated values. 
//
// 
Procedure UpdateIdleHandlerParameters(IdleHandlerParameters) Export
	
	IdleHandlerParameters.CurrentInterval = IdleHandlerParameters.CurrentInterval * IdleHandlerParameters.IntervalIncreaseCoefficient;
	If IdleHandlerParameters.CurrentInterval > IdleHandlerParameters.MaxInterval Then
		IdleHandlerParameters.CurrentInterval = IdleHandlerParameters.MaxInterval;
	EndIf;
		
EndProcedure

// Fills the parameter structure with default values.
// 
// Parameters:
//  IdleHandlerParameters - Structure - the structure to be filled with default values. 
//
// 
Procedure InitializeIdleHandlerParameters(IdleHandlerParameters) Export
	
	IdleHandlerParameters = New Structure;
	IdleHandlerParameters.Insert("MinInterval", 1);
	IdleHandlerParameters.Insert("MaxInterval", 15);
	IdleHandlerParameters.Insert("CurrentInterval", 1);
	IdleHandlerParameters.Insert("IntervalIncreaseCoefficient", 1.4);
	
EndProcedure